
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

// A service to be searched for. Will be associated with a specific non-profits database.
model service{
  id                    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  address               String
  addressInfo           Json?
  zipcode               String
  description           String?
  email                 String?
  phone                 String?
  website               String
  hours                 String?
  logo                  String?
  language              String[]
  date_needed           String?
  services_offered      String[]
  restrictions          String?
  next_steps            String
  nonprofit_ID          String  @db.Uuid
  nonprofit             nonprofit @relation(fields: [nonprofit_ID], references: [id])
}

// The non profit associated with a certain database of services.
model nonprofit {
  id                     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String    @unique
  phone                  String?
  email                  String?
  address                String?
  addressInfo            Json?
  website                String?
  logo                   String?
  services               service[]
  employees              nonprofit_employee[]
  refugees               refugee[]
  refugee_logs           refugee_log[]
}

// Each employee from the non profit side who can manage  the services for their non profit.
model nonprofit_employee{
  id                    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username              String   @unique
  password              String
  email                 String
  nonprofit_ID          String  @db.Uuid
  nonprofit             nonprofit @relation(fields: [nonprofit_ID], references: [id])
}

// The refugee account so a refugee can Log In and out and save services.
model refugee{
  id                    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username              String  @unique
  password              String
  signin_info           String
  email                 String
  address               String?
  nonprofit_ID          String  @db.Uuid
  nonprofit             nonprofit @relation(fields: [nonprofit_ID], references: [id])
  logs                  refugee_log[]
  }


// A log object for a refugee user to keep track of important data.
model refugee_log{
  id                    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                  String
  data                  String
  date                  Int
  refugee               refugee @relation(fields: [refugee_ID], references: [id])
  refugee_ID            String  @db.Uuid
  nonprofit_ID          String  @db.Uuid
  nonprofit             nonprofit @relation(fields: [nonprofit_ID], references: [id])
}
